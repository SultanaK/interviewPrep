Design a sudoku solver
Interviewer said - dont worry about the optimizations etc. Just write a code that works and is readable and understandable at a later date:



function rowCheck(grid){
    const nums = [1,2,3,4,5,6,7,8,9];
     let valid_sudoku = true;
     grid.forEach(row => {
        nums.forEach(el => {
            if( !row.includes(el))
                valid_sudoku = false;
            });
    });
    return valid_sudoku;
}
function sudokuCheck(grid) {
    let gridT = []
    let valid_sudoku = true;
    for(let i=0;i<9;i++){
      gridT.push([]);
    }
    let gridS = []
    for(let i=0;i<9;i++){
      gridS.push([]);
    }
    //rows
    valid_sudoku = rowCheck(grid)
    if(!valid_sudoku)
        return valid_sudoku;
    //columns
    grid.forEach((row) => {
        row.forEach((el, col_ind) => {
            gridT[col_ind].push(el)
        })
    })
    valid_sudoku = rowCheck(gridT)
    if(!valid_sudoku)
        return valid_sudoku;
    //sub-grid
    for(let k=0;k<9;k++){
        let iS = (k % 3) * 3
        let jS = Math.floor(k / 3) * 3
        // [0,0] [3,0] [6,0] [0,3], [3,3] ,[6,3],[0,6] ....
        for(i = iS;i<iS+3;i++){
            for(j = jS;j<jS+3;j++){
                gridS[k].push(grid[i][j]);
            }
        }
    }
   valid_sudoku = rowCheck(gridS)
    return valid_sudoku;
}





